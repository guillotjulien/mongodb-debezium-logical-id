name = mongo-users
connector.class           = io.debezium.connector.mongodb.MongoDbConnector
tasks.max                 = 1
topic.prefix              = data
mongodb.connection.string = mongodb://mongo:27017?authSource=admin&replicaSet=rs0
mongodb.ssl.enabled       = false
filters.match.mode        = literal
collection.include.list   = test.users

# When initialized without resume token, copy the entire collection to the topic.
snapshot.mode        = initial
snapshot.max.threads = 1

# Publish only the fullDocument, not changed fields and publish a tombstone
# when a document is deleted so that Kafka topic compaction can do its job.
capture.mode         = change_streams_update_full_with_pre_image

predicates                    = IsTombstone
predicates.IsTombstone.type   = org.apache.kafka.connect.transforms.predicates.RecordIsTombstone

transforms = unwrap,setkey

# 1. Unwrap the Debezium event to simplify the message value
# For create / update, it'll put the document fields at the root level of the message.
# For delete, it'll try to use the before state if capture.mode is set to change_streams_update_full_with_pre_image
# and pre-images are enabled on the collection. Otherwise the payload will contain fields with null values and deletion
# indicator.
transforms.unwrap.type                                           = io.debezium.connector.mongodb.transforms.ExtractNewDocumentState
transforms.unwrap.delete.tombstone.handling.mode                 = rewrite-with-tombstone
transforms.unwrap.add.fields                                     = op,ts_ms

# 2. Extract the 'user_id' field from the message to use as the message key
transforms.setkey.type = org.apache.kafka.connect.transforms.ValueToKey
transforms.setkey.fields = user_id

# Don't apply predicates on tombstones since the payload is null
transforms.setkey.predicate   = IsTombstone
transforms.setkey.negate      = true
